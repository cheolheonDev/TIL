// 렉시컬 스코프 

// 스코프 - 
// 엔진이 확인자 이름으로 현재 스코프 또는 중첩 스코프 내에서 변수를 찾을 때 사용하는 '규칙의 집합'

// 스코프가 작동하는 방식 
// 1. 렉시컬 스코프 Lexical Scope  // 주요 언어 
// 2. 동적 스코프 Dynamic Scope   // Bash Scripting 이나 또는 몇몇 언어 (perl의 일부 모드?)

// 렉싱 타임 
// 렉시컬 스코프는 렉싱 타임에 정의되는 스코프다. 
// 렉시컬 스코프는 프로그래머가 코드를 짤 때 변수와 스코프 블록을 어디서 작성하느가에 기초해서 렉서가 코드를 처리할 때 확정된다. 

function foo(a) {   ///1
    var b = a * 2;        ///2
    function bar(c){         /// 3 ( c 만)
        console.log(a,b,c);  /// 3
    }
    bar(b*3);             ///2 
}
foo(2)              ///1


// 스코프 버블, 스코프 블록이 쓰인 곳에 따라 결정되는데 
// 지금은 각각의 함수가 새로운 스코프 버블을 생성한다고 가정한다. 
// bar의 버블은 foo의 버블에 포함된다. 
// 중첩버블이 가능할까? // 어떤 함수도 두 개의 부모 함수 안에 존재할 수 없다. 

// 검색 
// shodowing - 여러 중첩 스코프에 걸쳐 같은 확인자 이름을 정의하는 것 
//             (더 안쪽의 확인자가 더 바깥쪽의 확인자를 가리는 것)

// 렉시컬 속이기 
// 렉시컬 스코프를 속이는 방법은 성능을 떨어트린다. 
// 두가지 방법이 있다. ( 쓰지 말자 )

// 1. eval을 활용한 방법
// 2. with를 활용한 방법
        //  넘겨진 객체를 가지고 새로운 렉시컬 스코프를 생성한다. 
        //  없는 프로퍼티에 값을 대입하는 작업을 한다면, 일반적인 LHS검색 규칙에 따라 작동된다. 
        //  ( 글로벌 스코프에 a확인자가 생성된다. )
